import unittest
import os
import sys
import importlib

from szablon160 import Zadanie_160


def odpal_testy():
    suite = unittest.TestLoader().loadTestsFromTestCase(testy)
    unittest.TextTestRunner(verbosity=2, failfast=True).run(suite)


def komenda(k: str, *args, **kwargs):
    """
    Wykonuje zadaną komendę z przekazanymi argumentami.
    Dodanie wlasnej komendy ogranicza sie do dodania pliku z funkcja o tej samej nazwie
    w folderze glownym projektu src/Komendy
    Wiecej informacji o dodaniu wlasnej komendy jak i lista komend w ReadMe projektu

    Args:
        k (str): Komenda do wykonania.
        *args: Dodatkowe argumenty do komendy.
        **kwargs: Dodatkowe argumenty kluczowe do komendy.
    """
    sciezka_pliku_wykonalnego = os.path.abspath(sys.argv[0])
    srt_dir = os.path.join(os.path.dirname(sciezka_pliku_wykonalnego), "../../srt")
    sys.path.append(srt_dir)
    nr_zadania = os.path.basename(os.path.dirname(sciezka_pliku_wykonalnego))
    return importlib.import_module("WykonajKomende").wykonaj_komende(
        k, sciezka_pliku_wykonalnego, nr_zadania, *args, **kwargs
    )


class testy(unittest.TestCase):

    def test_Nr01_Zadanie_160(self):
        self.assertEqual(
            Zadanie_160(
                [
                    (0, 40, 0, 40),
                    (40, 46, 40, 46),
                    (50, 56, 50, 56),
                    (60, 66, 60, 66),
                    (70, 76, 70, 76),
                    (80, 86, 80, 86),
                    (90, 96, 90, 96),
                    (100, 106, 100, 106),
                    (106, 112, 106, 112),
                    (112, 118, 112, 118),
                    (120, 126, 120, 126),
                    (130, 136, 130, 136),
                    (140, 144, 140, 144),
                ]
            ),
            True,
        )

    def test_Nr02_Zadanie_160(self):
        self.assertEqual(
            Zadanie_160(
                [
                    (0, 50, 50, 100),
                    (0, 40, 0, 40),
                    (40, 46, 40, 46),
                    (50, 56, 50, 56),
                    (60, 66, 60, 66),
                    (70, 76, 70, 76),
                    (80, 86, 80, 86),
                    (90, 96, 90, 96),
                    (100, 106, 100, 106),
                    (106, 112, 106, 112),
                    (112, 118, 112, 118),
                    (120, 126, 120, 126),
                    (130, 136, 130, 136),
                    (140, 144, 140, 144),
                ]
            ),
            True,
        )

    def test_Nr03_Zadanie_160(self):
        self.assertEqual(
            Zadanie_160(
                [
                    (0, 50, 50, 100),
                    (0, 40, 0, 40),
                    (40, 46, 40, 46),
                    (50, 56, 50, 56),
                    (60, 66, 60, 66),
                    (70, 76, 70, 76),
                    (80, 86, 80, 86),
                    (31, 40, 31, 40),
                    (41, 50, 41, 50),
                    (51, 60, 51, 60),
                    (61, 70, 61, 70),
                    (71, 80, 71, 80),
                    (81, 90, 81, 90),
                    (91, 100, 91, 100),
                    (101, 104, 101, 104),
                    (105, 108, 105, 108),
                    (109, 112, 109, 112),
                    (90, 96, 90, 96),
                    (100, 106, 100, 106),
                    (106, 112, 106, 112),
                    (112, 118, 112, 118),
                    (120, 126, 120, 126),
                    (130, 136, 130, 136),
                    (140, 144, 140, 144),
                ]
            ),
            True,
        )

    def test_Nr04_Zadanie_160(self):
        self.assertEqual(
            Zadanie_160(
                [
                    (0, 50, 50, 100),
                    (0, 40, 0, 40),
                    (39, 45, 39, 45),
                    (50, 56, 50, 56),
                    (60, 66, 60, 66),
                    (70, 76, 70, 76),
                    (80, 86, 80, 86),
                    (31, 40, 31, 40),
                    (41, 50, 41, 50),
                    (51, 60, 51, 60),
                    (61, 70, 61, 70),
                    (71, 80, 71, 80),
                    (81, 90, 81, 90),
                    (91, 100, 91, 100),
                    (101, 104, 101, 104),
                    (105, 108, 105, 108),
                    (109, 112, 109, 112),
                    (90, 96, 90, 96),
                    (100, 106, 100, 106),
                    (106, 112, 106, 112),
                    (112, 118, 112, 118),
                    (120, 126, 120, 126),
                    (130, 136, 130, 136),
                    (140, 144, 140, 144),
                ]
            ),
            False,
        )

    def test_Nr05_Zadanie_160(self):
        self.assertEqual(
            Zadanie_160(
                [
                    (0, 50, 50, 100),
                    (0, 40, 0, 40),
                    (40, 46, 39, 45),
                    (50, 56, 50, 56),
                    (60, 66, 60, 66),
                    (70, 76, 70, 76),
                    (80, 86, 80, 86),
                    (31, 40, 31, 40),
                    (41, 50, 41, 50),
                    (51, 60, 51, 60),
                    (61, 70, 61, 70),
                    (71, 80, 71, 80),
                    (81, 90, 81, 90),
                    (91, 100, 91, 100),
                    (101, 104, 101, 104),
                    (105, 108, 105, 108),
                    (109, 112, 109, 112),
                    (90, 96, 90, 96),
                    (100, 106, 100, 106),
                    (106, 112, 106, 112),
                    (112, 118, 112, 118),
                    (120, 126, 120, 126),
                    (130, 136, 130, 136),
                    (140, 144, 140, 144),
                ]
            ),
            True,
        )

    def test_Nr06_Zadanie_160(self):
        self.assertEqual(
            Zadanie_160(
                [
                    (0, 50, 50, 100),
                    (0, 40, 0, 40),
                    (40, 47, 40, 47),
                    (50, 56, 50, 56),
                    (60, 66, 60, 66),
                    (70, 76, 70, 76),
                    (80, 86, 80, 86),
                    (31, 40, 31, 40),
                    (41, 50, 41, 50),
                    (51, 60, 51, 60),
                    (61, 70, 61, 70),
                    (71, 80, 71, 80),
                    (81, 90, 81, 90),
                    (91, 100, 91, 100),
                    (101, 104, 101, 104),
                    (105, 108, 105, 108),
                    (109, 112, 109, 112),
                    (90, 96, 90, 96),
                    (100, 106, 100, 106),
                    (106, 112, 106, 112),
                    (112, 118, 112, 118),
                    (120, 126, 120, 126),
                    (130, 136, 130, 136),
                    (140, 144, 140, 144),
                ]
            ),
            False,
        )

    def test_Nr07_Zadanie_160(self):
        self.assertEqual(
            Zadanie_160(
                [
                    (0, 44, 0, 44),
                    (100, 108, 100, 108),
                    (50, 52, 50, 52),
                    (54, 56, 54, 56),
                    (60, 62, 60, 62),
                    (35, 41, 35, 41),
                    (42, 48, 42, 48),
                    (49, 55, 49, 55),
                    (56, 62, 56, 62),
                    (63, 69, 63, 69),
                    (70, 76, 70, 76),
                    (77, 83, 77, 83),
                    (84, 90, 84, 90),
                    (91, 97, 91, 97),
                    (98, 104, 98, 104),
                ]
            ),
            False,
        )

    def test_Nr08_Zadanie_160(self):
        self.assertEqual(
            Zadanie_160(
                [
                    (21, 25, 21, 25),
                    (0, 40, 0, 40),
                    (40, 46, 40, 46),
                    (50, 56, 50, 56),
                    (60, 66, 60, 66),
                    (70, 76, 70, 76),
                    (80, 86, 80, 86),
                    (0, 30, 0, 30),
                    (31, 40, 31, 40),
                    (41, 50, 41, 50),
                    (51, 60, 51, 60),
                    (61, 70, 61, 70),
                    (71, 80, 71, 80),
                    (81, 90, 81, 90),
                    (91, 100, 91, 100),
                    (101, 104, 101, 104),
                    (105, 108, 105, 108),
                    (109, 112, 109, 112),
                    (31, 40, 31, 40),
                    (41, 50, 41, 50),
                    (51, 60, 51, 60),
                    (61, 70, 61, 70),
                    (71, 80, 71, 80),
                    (81, 90, 81, 90),
                    (91, 100, 91, 100),
                    (101, 104, 101, 104),
                    (105, 108, 105, 108),
                    (109, 112, 109, 112),
                    (90, 96, 90, 96),
                    (100, 106, 100, 106),
                    (106, 112, 106, 112),
                    (112, 118, 112, 118),
                    (120, 126, 120, 126),
                    (130, 136, 130, 136),
                    (140, 144, 140, 144),
                ]
            ),
            True,
        )
